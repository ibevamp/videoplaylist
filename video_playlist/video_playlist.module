<?php

/**
 * Implements hook_menu().
 */
function video_playlist_menu() {

    $items = array();

    $items['admin/config/media/videoplaylist'] = array(
        'title' => t('Video Playlist Settings'),
        'description' => 'Configuration page for the video playlist module.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('video_playlist_admin_form'),
        'access arguments' => array('administer videoplaylist settings'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'video_playlist_admin.inc',
        'file path' => drupal_get_path('module', 'video_playlist') . '/includes',
    );

    return $items;
}

/**
 * Implements hook_theme_registry_alter().
 */
function video_playlist_theme_registry_alter(&$theme_registry)
{
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'video_playlist');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path . '/templates';
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}

function video_playlist_preprocess_page(&$variables){
    global $theme_key;
    $scripts_base_path = 'sites/all/themes/' . $theme_key . '/javascript/';
	$css_base_path = 'sites/all/themes/' . $theme_key . '/css/';
    $scripts_base_path2 = 'sites/all/themes/' . $theme_key . '/js/';
    $scripts = drupal_add_js();
	$css = drupal_add_css();

    if(!isset($scripts[$scripts_base_path . 'video.js']) && !isset($scripts[$scripts_base_path2 . 'video.js'])) {
        drupal_add_js(drupal_get_path('module','video_playlist') . "/js/video.js", array('group' => JS_THEME, 'weight' => JS_DEFAULT + 100, 'every_page' => FALSE));
    };
    if(!isset($scripts[$scripts_base_path . 'videojs-playlist.js']) && !isset($scripts[$scripts_base_path2 . 'videojs-playlist.js'])) {
        drupal_add_js(drupal_get_path('module','video_playlist') . "/js/videojs-playlist.js", array('group' => JS_THEME, 'weight' => JS_DEFAULT + 100, 'every_page' => FALSE));
    }
    if(!isset($scripts[$scripts_base_path . 'videojs-playlist.js']) && !isset($scripts[$scripts_base_path2 . 'videojs-playlist.js'])) {
        drupal_add_js(drupal_get_path('module','video_playlist') . "/js/videojs-playlist-ui.js", array('group' => JS_THEME, 'weight' => JS_DEFAULT + 100, 'every_page' => FALSE));
    }
    drupal_add_js(drupal_get_path('module','video_playlist') . "/js/script.js", array('group' => JS_THEME, 'weight' => JS_DEFAULT + 100, 'every_page' => FALSE));
    drupal_add_css(drupal_get_path('module','video_playlist') . "/css/mck-fonts.css", array('group' => CSS_THEME, 'weight' => CSS_THEME + 100, 'every_page' => FALSE));
    if(!isset($css[$css_base_path . 'video-js.css'])) {
       drupal_add_css(drupal_get_path('module','video_playlist') . "/css/video-js.css", array('group' => CSS_THEME, 'weight' => CSS_THEME + 100, 'every_page' => FALSE));
    } 
    drupal_add_css(drupal_get_path('module','video_playlist') . "/css/videojs-playlist-ui.css", array('group' => CSS_THEME,  'weight' => CSS_THEME + 100, 'every_page' => FALSE));
    drupal_add_css(drupal_get_path('module','video_playlist') . "/css/base-theme.css", array('group' => 200, 'weight' => CSS_THEME + 9999, 'every_page' => FALSE));

}

function video_playlist_preprocess_field(array &$vars) {

    if ($vars['element']['#field_name'] == 'field_vpp') {
        $horizontalBool = !empty($vars['element']['#object']->field_playlist_is_horizontal['und'][0]['value']) ? $vars['element']['#object']->field_playlist_is_horizontal['und'][0]['value'] : 0;
        $items = $vars['items'];

        $isHorizontal = 'false';
        $class = 'vertical';

        if($horizontalBool == 1) {
            $isHorizontal = 'true';
            $class = "horizontal";
        }

        $options = '{
            horizontal:' . $isHorizontal . '
        }';

        $js = "var player = videojs('preview-player', {
            fluid: true,
        });
        player.addClass('" . $class . "');
        player.playlist([";

        foreach($items as $item){

            $paraID = key($item['entity']['paragraphs_item']);
            $poster = !empty($item['entity']['paragraphs_item'][$paraID]['field_playlist_video_poster'][0]['#item']['uri']) ? file_create_url($item['entity']['paragraphs_item'][$paraID]['field_playlist_video_poster'][0]['#item']['uri']) : '';
            $video = !empty($item['entity']['paragraphs_item'][$paraID]['field_playlist_video']['#items'][0]['uri']) ? file_create_url($item['entity']['paragraphs_item'][$paraID]['field_playlist_video']['#items'][0]['uri']) : '';
            $vars['video_urls'][] = $video;
            $title = !empty($item['entity']['paragraphs_item'][$paraID]['field_playlist_video_title']['#items'][0]['value']) ? $item['entity']['paragraphs_item'][$paraID]['field_playlist_video_title']['#items'][0]['value'] : '';
            $description = !empty($item['entity']['paragraphs_item'][$paraID]['field_playlist_video_description']['#items'][0]['value']) ? $item['entity']['paragraphs_item'][$paraID]['field_playlist_video_description']['#items'][0]['value'] : '';
            $duration = !empty($item['entity']['paragraphs_item'][$paraID]['field_playlist_video']['#items'][0]['duration']) ? $item['entity']['paragraphs_item'][$paraID]['field_playlist_video']['#items'][0]['duration'] : '0:00';
            $download = !empty($item['entity']['paragraphs_item'][$paraID]['field_playlist_video_download']['#items'][0]['value']) ? $item['entity']['paragraphs_item'][$paraID]['field_playlist_video_download']['#items'][0]['value'] : '';

            $js .= "
            {
                name: '".$title."',
                description: '".$description."',
                duration: '".$duration."',
                sources: [
                    { src: '".$video."' },
                ],
                thumbnail: [
                    {
                        srcset: '".$poster."',
                        type: 'image/jpeg',
                        media: '(min-width: 400px;)'
                    },
                    {
                        src: '".$poster."'
                    }
                ],
                poster: '".$poster."'
            },";
        } //end foreach

        $js .= "]);";
        $js .= " ";
        $js .= "player.playlistUi(" . $options . ");";

        drupal_add_js('jQuery(document).ready(function(){' . $js .'});', 'inline');

    } //end if

}

/**
 * Implements hook_form_alter()
 * @param $form
 * @param $form_state
 * @param $form_id
 */

function video_playlist_form_alter(&$form, &$form_state, $form_id) {

    if($form_id == "video_playlist_node_form"){
        //$form['#validate'][] = "validate_video_paragraph";

    };
}

/**
 * Validate that there is only one video paragraph per node
 * @param $form
 * @param $form_state
 */

function validate_video_paragraph(&$form, $form_state){
    $total = 0;

    foreach($form_state['values']['field_paragraph']['und'] as $key => $para){
        if(isset($para['field_vpp']))
            $total++;
    }

    if($total > 1){

        form_set_error('playlist_video_wrapper',"Please use only one video playlist paragraph per node");
    }


}